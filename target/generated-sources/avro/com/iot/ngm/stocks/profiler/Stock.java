/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iot.ngm.stocks.profiler;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Stock extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1006622375104868042L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Stock\",\"namespace\":\"com.iot.ngm.stocks.profiler\",\"fields\":[{\"name\":\"time\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Interval for which the rest of the fields are applied\"},{\"name\":\"open\",\"type\":\"float\",\"doc\":\"Open stock price\"},{\"name\":\"high\",\"type\":\"float\",\"doc\":\"Highest stock price within interval\"},{\"name\":\"low\",\"type\":\"float\",\"doc\":\"Lowest stock price within interval\"},{\"name\":\"close\",\"type\":\"float\",\"doc\":\"Close stock price\"},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the equity\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<Stock> ENCODER =
      new BinaryMessageEncoder<Stock>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Stock> DECODER =
      new BinaryMessageDecoder<Stock>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Stock> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Stock> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Stock> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Stock>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Stock to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Stock from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Stock instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Stock fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Interval for which the rest of the fields are applied */
  private java.time.Instant time;
  /** Open stock price */
  private float open;
  /** Highest stock price within interval */
  private float high;
  /** Lowest stock price within interval */
  private float low;
  /** Close stock price */
  private float close;
  /** Name of the equity */
  private java.lang.String symbol;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Stock() {}

  /**
   * All-args constructor.
   * @param time Interval for which the rest of the fields are applied
   * @param open Open stock price
   * @param high Highest stock price within interval
   * @param low Lowest stock price within interval
   * @param close Close stock price
   * @param symbol Name of the equity
   */
  public Stock(java.time.Instant time, java.lang.Float open, java.lang.Float high, java.lang.Float low, java.lang.Float close, java.lang.String symbol) {
    this.time = time.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.open = open;
    this.high = high;
    this.low = low;
    this.close = close;
    this.symbol = symbol;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return open;
    case 2: return high;
    case 3: return low;
    case 4: return close;
    case 5: return symbol;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.time.Instant)value$; break;
    case 1: open = (java.lang.Float)value$; break;
    case 2: high = (java.lang.Float)value$; break;
    case 3: low = (java.lang.Float)value$; break;
    case 4: close = (java.lang.Float)value$; break;
    case 5: symbol = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return Interval for which the rest of the fields are applied
   */
  public java.time.Instant getTime() {
    return time;
  }



  /**
   * Gets the value of the 'open' field.
   * @return Open stock price
   */
  public float getOpen() {
    return open;
  }



  /**
   * Gets the value of the 'high' field.
   * @return Highest stock price within interval
   */
  public float getHigh() {
    return high;
  }



  /**
   * Gets the value of the 'low' field.
   * @return Lowest stock price within interval
   */
  public float getLow() {
    return low;
  }



  /**
   * Gets the value of the 'close' field.
   * @return Close stock price
   */
  public float getClose() {
    return close;
  }



  /**
   * Gets the value of the 'symbol' field.
   * @return Name of the equity
   */
  public java.lang.String getSymbol() {
    return symbol;
  }



  /**
   * Creates a new Stock RecordBuilder.
   * @return A new Stock RecordBuilder
   */
  public static com.iot.ngm.stocks.profiler.Stock.Builder newBuilder() {
    return new com.iot.ngm.stocks.profiler.Stock.Builder();
  }

  /**
   * Creates a new Stock RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Stock RecordBuilder
   */
  public static com.iot.ngm.stocks.profiler.Stock.Builder newBuilder(com.iot.ngm.stocks.profiler.Stock.Builder other) {
    if (other == null) {
      return new com.iot.ngm.stocks.profiler.Stock.Builder();
    } else {
      return new com.iot.ngm.stocks.profiler.Stock.Builder(other);
    }
  }

  /**
   * Creates a new Stock RecordBuilder by copying an existing Stock instance.
   * @param other The existing instance to copy.
   * @return A new Stock RecordBuilder
   */
  public static com.iot.ngm.stocks.profiler.Stock.Builder newBuilder(com.iot.ngm.stocks.profiler.Stock other) {
    if (other == null) {
      return new com.iot.ngm.stocks.profiler.Stock.Builder();
    } else {
      return new com.iot.ngm.stocks.profiler.Stock.Builder(other);
    }
  }

  /**
   * RecordBuilder for Stock instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Stock>
    implements org.apache.avro.data.RecordBuilder<Stock> {

    /** Interval for which the rest of the fields are applied */
    private java.time.Instant time;
    /** Open stock price */
    private float open;
    /** Highest stock price within interval */
    private float high;
    /** Lowest stock price within interval */
    private float low;
    /** Close stock price */
    private float close;
    /** Name of the equity */
    private java.lang.String symbol;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iot.ngm.stocks.profiler.Stock.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.open)) {
        this.open = data().deepCopy(fields()[1].schema(), other.open);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.high)) {
        this.high = data().deepCopy(fields()[2].schema(), other.high);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.low)) {
        this.low = data().deepCopy(fields()[3].schema(), other.low);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.close)) {
        this.close = data().deepCopy(fields()[4].schema(), other.close);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.symbol)) {
        this.symbol = data().deepCopy(fields()[5].schema(), other.symbol);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Stock instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iot.ngm.stocks.profiler.Stock other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.open)) {
        this.open = data().deepCopy(fields()[1].schema(), other.open);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.high)) {
        this.high = data().deepCopy(fields()[2].schema(), other.high);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.low)) {
        this.low = data().deepCopy(fields()[3].schema(), other.low);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.close)) {
        this.close = data().deepCopy(fields()[4].schema(), other.close);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.symbol)) {
        this.symbol = data().deepCopy(fields()[5].schema(), other.symbol);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * Interval for which the rest of the fields are applied
      * @return The value.
      */
    public java.time.Instant getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * Interval for which the rest of the fields are applied
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder setTime(java.time.Instant value) {
      validate(fields()[0], value);
      this.time = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * Interval for which the rest of the fields are applied
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * Interval for which the rest of the fields are applied
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'open' field.
      * Open stock price
      * @return The value.
      */
    public float getOpen() {
      return open;
    }


    /**
      * Sets the value of the 'open' field.
      * Open stock price
      * @param value The value of 'open'.
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder setOpen(float value) {
      validate(fields()[1], value);
      this.open = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'open' field has been set.
      * Open stock price
      * @return True if the 'open' field has been set, false otherwise.
      */
    public boolean hasOpen() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'open' field.
      * Open stock price
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder clearOpen() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'high' field.
      * Highest stock price within interval
      * @return The value.
      */
    public float getHigh() {
      return high;
    }


    /**
      * Sets the value of the 'high' field.
      * Highest stock price within interval
      * @param value The value of 'high'.
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder setHigh(float value) {
      validate(fields()[2], value);
      this.high = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'high' field has been set.
      * Highest stock price within interval
      * @return True if the 'high' field has been set, false otherwise.
      */
    public boolean hasHigh() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'high' field.
      * Highest stock price within interval
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder clearHigh() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'low' field.
      * Lowest stock price within interval
      * @return The value.
      */
    public float getLow() {
      return low;
    }


    /**
      * Sets the value of the 'low' field.
      * Lowest stock price within interval
      * @param value The value of 'low'.
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder setLow(float value) {
      validate(fields()[3], value);
      this.low = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'low' field has been set.
      * Lowest stock price within interval
      * @return True if the 'low' field has been set, false otherwise.
      */
    public boolean hasLow() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'low' field.
      * Lowest stock price within interval
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder clearLow() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'close' field.
      * Close stock price
      * @return The value.
      */
    public float getClose() {
      return close;
    }


    /**
      * Sets the value of the 'close' field.
      * Close stock price
      * @param value The value of 'close'.
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder setClose(float value) {
      validate(fields()[4], value);
      this.close = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'close' field has been set.
      * Close stock price
      * @return True if the 'close' field has been set, false otherwise.
      */
    public boolean hasClose() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'close' field.
      * Close stock price
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder clearClose() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * Name of the equity
      * @return The value.
      */
    public java.lang.String getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * Name of the equity
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder setSymbol(java.lang.String value) {
      validate(fields()[5], value);
      this.symbol = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * Name of the equity
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'symbol' field.
      * Name of the equity
      * @return This builder.
      */
    public com.iot.ngm.stocks.profiler.Stock.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Stock build() {
      try {
        Stock record = new Stock();
        record.time = fieldSetFlags()[0] ? this.time : (java.time.Instant) defaultValue(fields()[0]);
        record.open = fieldSetFlags()[1] ? this.open : (java.lang.Float) defaultValue(fields()[1]);
        record.high = fieldSetFlags()[2] ? this.high : (java.lang.Float) defaultValue(fields()[2]);
        record.low = fieldSetFlags()[3] ? this.low : (java.lang.Float) defaultValue(fields()[3]);
        record.close = fieldSetFlags()[4] ? this.close : (java.lang.Float) defaultValue(fields()[4]);
        record.symbol = fieldSetFlags()[5] ? this.symbol : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Stock>
    WRITER$ = (org.apache.avro.io.DatumWriter<Stock>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Stock>
    READER$ = (org.apache.avro.io.DatumReader<Stock>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










